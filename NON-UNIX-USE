Compiling PCRE on non-Unix systems
----------------------------------

If you want to compile PCRE for a non-Unix system, note that it consists
entirely of code written in Standard C, and so should compile successfully
on any machine with a Standard C compiler and library, using normal compiling
commands to do the following:

(1) Copy or rename the file config.in as config.h. You should not have to
change any settings inside it for a Standard C environment.

(2) Compile dftables.c as a stand-alone program, and then run it with
the standard output sent to chartables.c. This generates a set of standard
character tables.

(3) Compile maketables.c, get.c, study.c and pcre.c and link them all
together into an object library in whichever form your system keeps such
libraries. This is the pcre library (chartables.c gets included by means of an
#include directive).

(4) Similarly, compile pcreposix.c and link it as the pcreposix library.

(5) Compile the test program pcretest.c. This needs the functions in the
pcre and pcreposix libraries when linking.

(6) Run pcretest on the testinput files in the testdata directory, and check
that the output matches the corresponding testoutput files. You must use the
-i option when checking testinput2.

If you have a system without "configure" but where you can use a Makefile, edit
Makefile.in to create Makefile, substituting suitable values for the variables
at the head of the file.

Some help in building a Win32 DLL of PCRE in GnuWin32 environments was
contributed by Paul.Sokolovsky@technologist.com. These environments are
Mingw32 (http://www.xraylith.wisc.edu/~khan/software/gnu-win32/) and
CygWin  (http://sourceware.cygnus.com/cygwin/). Paul comments:

  For CygWin, set CFLAGS=-mno-cygwin, and do 'make dll'. You'll get
  pcre.dll (containing pcreposix also), libpcre.dll.a, and dynamically
  linked pgrep and pcretest. If you have /bin/sh, run RunTest (three
  main test go ok, locale not supported).

****
