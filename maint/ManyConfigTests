#! /bin/sh

# This is a script for the use of PCRE maintainers. It configures and rebuilds
# PCRE with a variety of configuration options, and in each case runs the tests
# to ensure that all goes well. Every possible combination would take far too
# long, so we use a representative sample. This script should be run in the
# PCRE source directory.

# Some of the tests have to be skipped when PCRE is built with non-Unix newline
# recognition. I am planning to reduce this as much as possible in due course.


# This is in case the caller has set aliases (as I do - PH)

unset cp ls mv rm

# Use -v to make the output more verbose

verbose=0
if [ "$1" = "-v" ] ; then verbose=1; fi

# This is a temporary directory for testing out-of-line builds

tmp=/tmp/pcretesting


# This function runs a single test with the set of configuration options that
# are in $opts. The source directory must be set in srcdir.

function runtest()
  {
  rm -f *_unittest

  if [ "$opts" = "" ] ; then
    echo "Configuring with: default settings"
  else
    olen=`expr length "$opts"`
    if [ $olen -gt 53 ] ; then
      echo "Configuring with:"
      echo "  $opts"
    else
      echo "Configuring with: $opts"
    fi
  fi

  $srcdir/configure $opts >/dev/null 2>teststderr
  if [ $? -ne 0 ]; then
    echo " "
    echo "**** Error while configuring ****"
    cat teststderr
    exit 1
  fi

  echo "Making"
  make >/dev/null 2>teststderr
  if [ $? -ne 0 ]; then
    echo " "
    echo "**** Error while making ****"
    cat teststderr
    exit 1
  fi

  if [ $verbose -eq 1 ]; then
    ./pcretest -C
  fi

  conf=`./pcretest -C`
  nl=`expr match "$conf" ".*Newline sequence is \([A-Z]*\)"`

  if [ "$nl" = "LF" -o "$nl" = "ANY" ]; then
    echo "Running C library tests"
    $srcdir/RunTest >teststdout
    if [ $? -ne 0 ]; then
      echo " "
      echo "**** Test failed ****"
      cat teststdout
      exit 1
    fi
  else
    echo "Skipping C library tests: newline is $nl"
  fi

  if [ "$nl" = "LF" ]; then
    echo "Running pcregrep tests"
    $srcdir/RunGrepTest >teststdout 2>teststderr
    if [ $? -ne 0 ]; then
      echo " "
      echo "**** Test failed ****"
      cat teststderr
      cat teststdout
      exit 1
    fi
  else
    echo "Skipping pcregrep tests: newline is $nl"
  fi

  if [ "$nl" = "LF" -o "$nl" = "ANY" ]; then
    if [ -f pcrecpp_unittest ] ; then
      for utest in pcrecpp_unittest \
                   pcre_scanner_unittest \
                   pcre_stringpiece_unittest
      do
        echo "Running $utest"
        $utest >teststdout
        if [ $? -ne 0 ]; then
          echo " "
          echo "**** Test failed ****"
          cat teststdout
          exit 1
        fi
      done
    else
      echo "Skipping C++ tests: pcrecpp_unittest does not exist"
    fi
  else
    echo "Skipping C++ tests: newline is $nl"
  fi
  }


# This set of tests builds PCRE and runs the tests with a variety of configure
# options, in the current (source) directory. The first (empty) configuration
# builds with all the default settings. As well as testing that these options
# work, we use --disable-shared or --disable-static after the first test (which
# builds both) to save a bit of time by building only one version of the
# library for the subsequent tests.

echo "Tests in the current directory"
srcdir=.
for opts in \
  "" \
  "--enable-utf8 --disable-static" \
  "--disable-stack-for-recursion" \
  "--enable-utf8 --disable-stack-for-recursion" \
  "--enable-unicode-properties --disable-shared" \
  "--enable-unicode-properties --disable-stack-for-recursion --disable-shared" \
  "--enable-unicode-properties --disable-cpp --with-link-size=3 --disable-shared" \
  "--enable-rebuild-chartables --disable-shared" \
  "--enable-newline-is-any --disable-shared" \
  "--enable-newline-is-cr --disable-shared" \
  "--enable-newline-is-crlf --disable-shared" \
  "--enable-newline-is-anycrlf --enable-bsr-anycrlf --disable-shared" \
  "--enable-utf8 --enable-newline-is-any --enable-unicode-properties --disable-stack-for-recursion --disable-static --disable-cpp"
do
  runtest
done


# Clean up the distribution and then do at least one build and test in a
# directory other than the source directory. It doesn't work unless the
# source directory is cleaned up first - and anyway, it's best to leave it
# in a clean state after all this reconfiguring.

if [ -f Makefile ]; then
  echo "Running 'make distclean'"
  make distclean >/dev/null 2>&1
  if [ $? -ne 0 ]; then
    echo "** 'make distclean' failed"
    exit 1
  fi
fi

echo "Tests in the $tmp directory"
srcdir=`pwd`
export srcdir

if [ ! -e $tmp ]; then
  mkdir $tmp
fi

if [ ! -d $tmp ]; then
  echo "** Failed to create $tmp or it is not a directory"
  exit 1
fi

cd $tmp
if [ $? -ne 0 ]; then
  echo "** Failed to cd to $tmp"
  exit 1
fi

for opts in \
  "--enable-unicode-properties --disable-shared"
do
  runtest
done

echo "Removing $tmp"

rm -rf $tmp

echo "All done"

# End
